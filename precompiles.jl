precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(CachePackages.set_cache_package_path_and_add_it_to_load_path!), String})
precompile(Tuple{typeof(Base.startswith), String})
precompile(Tuple{Type{NamedTuple{(:msg,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:msg,), Tuple{String}}, typeof(Base.time_print), Base.TTY, UInt64, Int64, Int64, Int64, UInt64, UInt64, Bool})
precompile(Tuple{Base.var"#987#988"{String, UInt64, Int64, Int64, UInt64, UInt64, Bool, String}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CachePackages.var"#2#7", Nothing})
precompile(Tuple{typeof(Base.open), Function, Nothing})
precompile(Tuple{typeof(CachePackages.make_pkgimage_cache), String, String})
precompile(Tuple{Base.var"#460#461"{Base.IOStream}})
precompile(Tuple{typeof(Base.collect), Base.Dict{String, Any}})
precompile(Tuple{Base.var"##s128#247", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.sort!), Array{Pair{String, Any}, 1}})
precompile(Tuple{typeof(Base.isless), String, String})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CachePackages.var"#3#8"{String, String, Array{Pair{String, Any}, 1}}, String, Vararg{String}})
precompile(Tuple{typeof(Base.print), Base.IOStream, Dates.DateTime})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Array{Pair{String, Any}, 1}, CachePackages.var"#4#9"}, String})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CachePackages.var"#6#11"{String, Array{Pair{String, Any}, 1}, Base.UUID}, String, Vararg{String}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:types,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{47, Symbol}})
precompile(Tuple{Type{NamedTuple{(:validate,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.parsefilechunk!), CSV.Context, Int64, Int64, Int64, Int64, Array{CSV.Column, 1}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:types,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:types,), Tuple{DataType}}, Type{NamedTuple{(:copycols,), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:types,), Tuple{DataType}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, DataType, Tuple{Symbol}, NamedTuple{(:types,), Tuple{DataType}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:types,), Tuple{DataType}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:validate,), Tuple{Bool}}, typeof(CSV.initialize_columns), Int64, Type, Array{Symbol, 1}, Type, Vararg{Any}})
precompile(Tuple{CSV.var"##initialize_columns#24", Bool, typeof(CSV.initialize_columns), Int64, Type, Array{Symbol, 1}, Type, Vararg{Any}})
precompile(Tuple{typeof(CSV.initialize_column), Int64, Type, Array{Symbol, 1}, Type, Bool, Parsers.Options})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.IdDict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool, Type{Int64}})
precompile(Tuple{typeof(Base.:(|>)), Tables.CopiedColumns{CSV.File}, Type{DataFrames.DataFrame}})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.IdDict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool, Type{Float64}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.IdDict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool, Type{String}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{String}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
